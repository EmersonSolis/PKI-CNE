# Version of config file
version: 1.2.0

# Server's listening port (default: 7054)
port: 7055

# Enables debug logging (default: false)
debug: false

# Size limit of an acceptable CRL in bytes (default: 512000)
crlsizelimit: 512000

# TLS section for the server's listening port
tls:
  # Enable TLS (default: false)
  enabled: true
  # TLS for the server's listening port
  certfile: # /etc/hyperledger/fabric-ca-server-config/ca.cne.com-cert.pem
  keyfile: # /etc/hyperledger/fabric-ca-server-config/ca.cne.com-key.pem
  clientauth:
    type: noclientcert

# The CA section contains information related to the Certificate Authority
ca:
  # Name of this CA
  name: ca.orderer.cne.com
  # Key file (is only used to import a private key into BCCSP)
  keyfile: # /etc/hyperledger/fabric-ca-server-config/ca.cne.com-key.pem
  # Certificate file (default: ca-cert.pem)
  certfile: # /etc/hyperledger/fabric-ca-server-config/ca.cne.com-cert.pem
  # Chain file
  chainfile: # /etc/hyperledger/fabric-ca-server-config/ca-chain.cne.com.pem

# The gencrl REST endpoint is used to generate a CRL that contains revoked certificates
crl:
  expiry: 24h

# Registry section controls how the fabric-ca-server does two things:
registry:
  # Maximum number of times a password/secret can be reused for enrollment (default: -1, which means there is no limit)
  maxenrollments: -1
  # Contains identity information which is used when LDAP is disabled
  identities:
     - name: admin
       pass: adminpw
       type: client
       affiliation: ""
       attrs:
          hf.Registrar.Roles: "*"
          hf.Registrar.DelegateRoles: "*"
          hf.Revoker: true
          hf.IntermediateCA: true
          hf.GenCRL: true
          hf.Registrar.Attributes: "*"
          hf.AffiliationMgr: true

# Database section
db:
  type: sqlite3
  datasource: fabric-ca-server.db
  tls:
    enabled: false

#  LDAP section
ldap:
   # Enables or disables the LDAP client (default: false)
   # If this is set to true, the "registry" section is ignored.
   enabled: false
   # The URL of the LDAP server
   url: ldap://<adminDN>:<adminPassword>@<host>:<port>/<base>
   # TLS configuration for the client connection to the LDAP server
   tls:
      certfiles:
      client:
         certfile:
         keyfile:
   # Attribute related configuration for mapping from LDAP entries to Fabric CA attributes
   attribute:
      # 'names' is an array of strings containing the LDAP attribute names which are
      # requested from the LDAP server for an LDAP identity's entry
      names: ['uid','member']
      # The 'converters' section is used to convert an LDAP entry to the value of
      # a fabric CA attribute.
      # For example, the following converts an LDAP 'uid' attribute
      # whose value begins with 'revoker' to a fabric CA attribute
      # named "hf.Revoker" with a value of "true" (because the boolean expression
      # evaluates to true).
      #    converters:
      #       - name: hf.Revoker
      #         value: attr("uid") =~ "revoker*"
      converters:
         - name:
           value:
      # The 'maps' section contains named maps which may be referenced by the 'map'
      # function in the 'converters' section to map LDAP responses to arbitrary values.
      # For example, assume a user has an LDAP attribute named 'member' which has multiple
      # values which are each a distinguished name (i.e. a DN). For simplicity, assume the
      # values of the 'member' attribute are 'dn1', 'dn2', and 'dn3'.
      # Further assume the following configuration.
      #    converters:
      #       - name: hf.Registrar.Roles
      #         value: map(attr("member"),"groups")
      #    maps:
      #       groups:
      #          - name: dn1
      #            value: peer
      #          - name: dn2
      #            value: client
      # The value of the user's 'hf.Registrar.Roles' attribute is then computed to be
      # "peer,client,dn3".  This is because the value of 'attr("member")' is
      # "dn1,dn2,dn3", and the call to 'map' with a 2nd argument of
      # "group" replaces "dn1" with "peer" and "dn2" with "client".
      maps:
         groups:
            - name:
              value:

# Signing section
signing:
  default:
    usage:
      - digital signature
    expiry: 730h
  profiles:
    ca:
      usage:
        - cert sign
        - crl sign
      expiry: 730h
      caconstraint:
        isca: true
        maxpathlen: 0
    tls:
      usage:
        - signing
        - key encipherment
        - server auth
        - client auth
        - key agreement
      expiry: 730h


# Certificate Signing Request (CSR) section
csr:
  cn: ca.orderer.cne.com
  names:
    - C: EC
      ST: "Pichincha"
      L: "Quito"
      O: cne.com
      OU:
  hosts:
    - localhost
    - ca.orderer.cne.com
  ca:
    expiry: 14000h
    pathlength: 1

# BCCSP section
bccsp:
  default: SW
  sw:
    hash: SHA2
    security: 256
    filekeystore:
      keystore: msp/keystore

# Multi CA section
cacount:

cafiles:

# Intermediate CA section
intermediate:
  parentserver:
    url:
    caname:
  enrollment:
    hosts:
    profile:
    label:
  tls:
    certfiles:
    client:
      certfile:
      keyfile:
